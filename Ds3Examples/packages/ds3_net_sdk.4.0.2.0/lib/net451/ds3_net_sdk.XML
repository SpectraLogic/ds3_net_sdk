<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ds3_net_sdk</name>
    </assembly>
    <members>
        <member name="M:Ds3.Calls.AllocateJobChunkSpectraS3Response.Success(Ds3.Models.Objects)">
            <summary>
            Creates a response object specifying the object list that was successfully (or already) allocated.
            </summary>
            <param name="jobObjectList">The job objects that were allocated.</param>
            <returns>The response instance.</returns>
        </member>
        <member name="M:Ds3.Calls.AllocateJobChunkSpectraS3Response.RetryAfter(System.TimeSpan)">
            <summary>
            Creates a response object specifying that the client should retry the request.
            </summary>
            <param name="retryAfter">The amount of time that the client should wait before retrying.</param>
            <returns>The response instance.</returns>
        </member>
        <member name="P:Ds3.Calls.AllocateJobChunkSpectraS3Response.ChunkGone">
            <summary>
            Creates a response object specifying that the chunk no longer exists.
            </summary>
        </member>
        <member name="M:Ds3.Calls.AllocateJobChunkSpectraS3Response.Match(System.Action{Ds3.Models.Objects},System.Action{System.TimeSpan},System.Action)">
            <summary>
            Calls success, retryAfter, or chunkGone depending on which type of response this actually is.
            </summary>
            <param name="success">The function to call if this is a "success" instance.</param>
            <param name="retryAfter">The function to call if this is a "retryAfter" instance.</param>
            <param name="chunkGone">The function to call if this is a "chunkGone" instance.</param>
        </member>
        <member name="M:Ds3.Calls.AllocateJobChunkSpectraS3Response.Match``1(System.Func{Ds3.Models.Objects,``0},System.Func{System.TimeSpan,``0},System.Func{``0})">
            <summary>
            Calls success, retryAfter, or chunkGone depending on which type of response this actually is.
            </summary>
            <param name="success">The function to call if this is a "success" instance.</param>
            <param name="retryAfter">The function to call if this is a "retryAfter" instance.</param>
            <param name="chunkGone">The function to call if this is a "chunkGone" instance.</param>
            <returns>What either success, retryAfter, or chunkGone return.</returns>
        </member>
        <member name="M:Ds3.Calls.GetJobChunksReadyForClientProcessingSpectraS3Response.Success(System.TimeSpan,Ds3.Models.MasterObjectList)">
            <summary>
            Creates a response object stating that the job has chunks available.
            </summary>
            <param name="retryAfter">The number of seconds to wait before performing the REST call again if the client already knows about all of the chunks provided.</param>
            <param name="jobResponse">A job response with only the chunks that are available for the client.</param>
            <returns>The new response instance.</returns>
        </member>
        <member name="P:Ds3.Calls.GetJobChunksReadyForClientProcessingSpectraS3Response.JobGone">
            <summary>
            Creates a response object stating that the job does not exist.
            </summary>
        </member>
        <member name="M:Ds3.Calls.GetJobChunksReadyForClientProcessingSpectraS3Response.RetryAfter(System.TimeSpan)">
            <summary>
            Creates a response object stating that there are no chunks available to process.
            </summary>
            <param name="retryAfter">The amount of time to wait before asking again.</param>
            <returns>The new response instance.</returns>
        </member>
        <member name="M:Ds3.Calls.GetJobChunksReadyForClientProcessingSpectraS3Response.Match(System.Action{System.TimeSpan,Ds3.Models.MasterObjectList},System.Action{System.TimeSpan})">
            <summary>
            Convenience overload if the client wants to throw a job gone exception if the job is gone.
            </summary>
            <param name="success"></param>
            <param name="retryAfter"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Calls.GetJobChunksReadyForClientProcessingSpectraS3Response.Match``1(System.Func{System.TimeSpan,Ds3.Models.MasterObjectList,``0},System.Func{System.TimeSpan,``0})">
            <summary>
            Convenience overload if the client wants to throw a job gone exception if the job is gone.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="success"></param>
            <param name="retryAfter"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Calls.GetJobChunksReadyForClientProcessingSpectraS3Response.Match(System.Action{System.TimeSpan,Ds3.Models.MasterObjectList},System.Action,System.Action{System.TimeSpan})">
            <summary>
            Calls success, jobGone, or retryAfter depending on which response type this actually is.
            </summary>
            <param name="success">The function to call if the response object is a "success".</param>
            <param name="jobGone">The function to call if the response object is "jobGone".</param>
            <param name="retryAfter">The function to call if the response object is "retryAfter".</param>
        </member>
        <member name="M:Ds3.Calls.GetJobChunksReadyForClientProcessingSpectraS3Response.Match``1(System.Func{System.TimeSpan,Ds3.Models.MasterObjectList,``0},System.Func{``0},System.Func{System.TimeSpan,``0})">
            <summary>
            Calls success, jobGone, or retryAfter depending on which response type this actually is.
            </summary>
            <param name="success">The function to call if the response object is a "success".</param>
            <param name="jobGone">The function to call if the response object is "jobGone".</param>
            <param name="retryAfter">The function to call if the response object is "retryAfter".</param>
            <returns>What success, jobGone, or  retryAfter return.</returns>
        </member>
        <member name="T:Ds3.Calls.Util.RequestPayloadUtil">
            <summary>
            Contains utilities used to create properly formatted xml request payloads.
            </summary>
        </member>
        <member name="M:Ds3.Calls.Util.RequestPayloadUtil.MarshalPartsToStream(System.Collections.Generic.IEnumerable{Ds3.Models.Part})">
            <summary>
            Iterates over a group of Part objects and marshals them into an xml stream.
            This is used in CompleteMultiPartUploadRequest to marshal the request payload.
            </summary>
            <param name="parts">Parts to be marshaled to xml</param>
            <returns>Stream containing xml marshaling of parts</returns>
        </member>
        <member name="M:Ds3.Calls.Util.RequestPayloadUtil.MarshalDs3ObjectNames(System.Collections.Generic.IEnumerable{Ds3.Models.Ds3Object})">
            <summary>
            Iterates over a group of Ds3Objects and marshals them into an xml stream.
            Only the name for the Ds3Objects are marshaled. This is used to marshal
            the request payloads for:
              EjectStorageDomainBlobsSpectraS3Request
              GetPhysicalPlacementForObjectsSpectraS3Request
              GetPhysicalPlacementForObjectsWithFullDetailsSpectraS3Request
              VerifyPhysicalPlacementForObjectsSpectraS3Request
              VerifyPhysicalPlacementForObjectsWithFullDetailsSpectraS3Request
            </summary>
            <param name="ds3Objects">The Ds3Objects to be marshaled to xml</param>
            <returns>Stream containing xml marshaling of Ds3Object names</returns>
        </member>
        <member name="M:Ds3.Calls.Util.RequestPayloadUtil.MarshalFullAndPartialObjects(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Ds3.Models.Ds3PartialObject})">
            <summary>
            Marshals object names and Ds3PartialObjects into an xml formatted stream.
            This is used to marshal the request payloads for:
              GetBulkJobSpectraS3Request
              VerifyBulkJobSpectraS3Request
            </summary>
            <param name="fullObjectNames">List of object names representing full objects to be marshaled to xml</param>
            <param name="ds3PartialObjects">List of Ds3PartialObjects to be marshaled to xml</param>
            <returns>Stream containing xml marshaling of full objects followed by Ds3PartialObjects</returns>
        </member>
        <member name="M:Ds3.Calls.Util.RequestPayloadUtil.MarshalDeleteObjectNames(System.Collections.Generic.IEnumerable{Ds3.Models.Ds3Object})">
            <summary>
            Iterates over a group of Ds3Objects and marshals them into an xml stream
            describing objects to be deleted. Only the name for the Ds3Objects are 
            marshaled. This is used to marshal the request payload for:
              DeleteObjectsRequest
            </summary>
            <param name="ds3Objects">List of objects to be deleted</param>
            <returns>Stream containing xml marshaling of object names to be deleted</returns>
        </member>
        <member name="M:Ds3.Calls.Util.RequestPayloadUtil.MarshalDs3ObjectNameAndSize(System.Collections.Generic.IEnumerable{Ds3.Models.Ds3Object})">
            <summary>
            Iterates over a group of Ds3Objects and marshals them into an xml stream
            describing their name and size. This is used to marshal the request payload
            for command:
              PutBulkJobSpectraS3Request
            </summary>
            <param name="ds3Objects">List of objects being marshaled</param>
            <returns>Stream containing xml marshaling of objects' name and size</returns>
        </member>
        <member name="M:Ds3.Calls.Util.RequestPayloadUtil.ToDs3ObjectSize(Ds3.Models.Ds3Object)">
            <summary>
            Retrieves the string representation of a Ds3Object's size, or null if
            it does not have one.
            </summary>
            <param name="ds3Object">The object whose size we are retrieving</param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Helpers.FileSystemHelpers.Check(System.String,System.Collections.Generic.IEnumerable{Ds3.Models.Ds3Object})">
            <summary>
            Determines if the objects to read using a GET job can be saved on the given path
            </summary>
            <param name="path">Directory or UNC path of the volume to
            be checked (can be a network drive)</param>
            <param name="objectsToRead"></param>
            <returns><see cref="T:Ds3.Helpers.DriveResult"/></returns>
        </member>
        <member name="M:Ds3.Helpers.Strategies.ChunkStrategies.IChunkStrategy.GetNextTransferItems(Ds3.IDs3Client,Ds3.Models.MasterObjectList)">
            <summary>
            Allocate chunks using a specific strategy and returning allocated blobs
            </summary>
            <param name="client"></param>
            <param name="jobResponse"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Helpers.Strategies.ChunkStrategies.IChunkStrategy.CompleteBlob(Ds3.Helpers.Blob)">
            <summary>
            Marks a blob as complete
            </summary>
            <param name="blob"></param>
        </member>
        <member name="M:Ds3.Helpers.Strategies.ChunkStrategies.IChunkStrategy.Stop">
            <summary>
            Send a stop signal
            </summary>
        </member>
        <member name="T:Ds3.Helpers.Strategies.ChunkStrategies.ReadStreamChunkStrategy">
            <summary>
             The ReadStreamChunkStrategy will get the available job chunks and receive the blobs in order
             NOTE: To use this strategy the job must be created with the JobChunkClientProcessingOrderGuarantee.IN_ORDER
            </summary>
        </member>
        <member name="T:Ds3.Helpers.Strategies.ChunkStrategies.WriteRandomAccessChunkStrategy">
            <summary>
            The WriteRandomAccessChunkStrategy will allocate chunks as needed and return the allocated blobs
            </summary>
        </member>
        <member name="M:Ds3.Helpers.Strategies.ChunkStrategies.WriteRandomAccessChunkStrategy.GetObjectsNotInCache">
            <summary>
            Filtering the objects that are already in cache, 
            this helps us when using aggregating jobs to determinate which object are related to the current running job.
            </summary>
            <returns> A new list of objects to be processed by the running job</returns>
        </member>
        <member name="T:Ds3.Helpers.Strategies.ChunkStrategies.ReadRandomAccessChunkStrategy">
            <summary>
            The ReadRandomAccessChunkStrategy will get the available job chunks and allocate those chunks
            </summary>
        </member>
        <member name="M:Ds3.Helpers.Strategies.ChunkStrategies.ReadRandomAccessChunkStrategy.EnumerateTransferItemBatches">
            <summary>
            This generator method yields batches of transfer items. After yielding a
            batch, it blocks until the consumer passes each of the batch items to
            CompleteBlob. It does so using the _numberInProgress countdown event.
            If the consumer calls Stop, the generator terminates.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ds3.Helpers.Strategies.ChunkStrategies.WriteNoAllocateChunkStrategy">
            <summary>
            The WriteNoAllocateChunkStrategy will return all the blobs that were returned in the JobResponse
            without allocate cache space for them in BlackPearl
            </summary>
        </member>
        <member name="T:Ds3.Helpers.Strategies.ChunkStrategies.WriteStreamChunkStrategy">
            <summary>
            The WriteStreamChunkStrategy will allocate chunks one at a time for each stream in the job and return the allocated blobs
            </summary>
        </member>
        <member name="T:Ds3.Helpers.Strategies.ReadStreamHelperStrategy">
            <summary>
            The ReadStreamHelperStrategy bundle ReadStreamChunkStrategy with ReadStreamStreamFactory
            </summary>
        </member>
        <member name="T:Ds3.Helpers.Strategies.StreamFactory.ReadRandomAccessStreamFactory`1">
            <summary>
            Create one stream and receiving blobs in parallel using stream seeking
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:Ds3.Helpers.Strategies.StreamFactory.ReadStreamStreamFactory">
            <summary>
            Create one stream and GET blobs in order without seeking
            </summary>
        </member>
        <member name="T:Ds3.Helpers.Strategies.StreamFactory.WriteRandomAccessStreamFactory">
            <summary>
            Create a stream for each blob and transfer blobs in parallel
            </summary>
        </member>
        <member name="T:Ds3.Helpers.Strategies.StreamFactory.WriteStreamStreamFactory">
            <summary>
            Create one stream and transfer blobs in order without seeking
            </summary>
        </member>
        <member name="M:Ds3.Helpers.Strategies.StreamFactory.IStreamFactory`1.CreateStream(System.Func{`0,System.IO.Stream},Ds3.Helpers.RangeTranslators.IRangeTranslator{Ds3.Helpers.Blob,`0},Ds3.Helpers.Blob,System.Int64)">
            <summary>
            Create a new stream for every blob returned by GetNextTransferItems
            </summary>
            <param name="createStreamForTransferItem"></param>
            <param name="rangeTranslator"></param>
            <param name="blob"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Helpers.Strategies.StreamFactory.IStreamFactory`1.CloseBlob(Ds3.Helpers.Blob)">
            <summary>
            If a blob to stream strategy has been chosen than close the stream that associated with the completed blob
            </summary>
            <param name="blob"></param>
        </member>
        <member name="M:Ds3.Helpers.Strategies.StreamFactory.IStreamFactory`1.CloseStream(`0)">
            <summary>
            If a stream to stream strategy has been chosen than close the stream that associated with the completed stream
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Ds3.Helpers.Strategies.WriteStreamHelperStrategy">
            <summary>
            The WriteStreamHelperStrategy bundle WriteStreamChunkStrategy with WriteStreamStreamFactory
            </summary>
        </member>
        <member name="T:Ds3.Helpers.Strategies.IHelperStrategy`1">
            <summary>
            The IHelperStrategy bundle a chunkStrategy and StreamFactory to one Strategy.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:Ds3.Helpers.Strategies.ReadRandomAccessHelperStrategy`1">
            <summary>
            The ReadRandomAccessHelperStrategy bundle ReadRandomAccessChunkStrategy with ReadRandomAccessStreamFactory
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:Ds3.Helpers.Strategies.WriteNoAllocateHelperStrategy">
            <summary>
            The WriteNoAllocateHelperStrategy bundle WriteNoAllocateChunkStrategy with WriteRandomAccessStreamFactory
            </summary>
        </member>
        <member name="T:Ds3.Helpers.Strategies.WriteRandomAccessHelperStrategy">
            <summary>
            The WriteRandomAccessHelperStrategy bundle WriteRandomAccessChunkStrategy with WriteRandomAccessStreamFactory
            </summary>
        </member>
        <member name="M:Ds3.Helpers.FileHelpers.BuildFileGetter(System.String)">
            <summary>
                Creates a function that can open a file stream for writing.
                Backwards-compatible signature before prefix was added
                Creates all directories needed to save the file.
            </summary>
            <param name="root">The root directory within which to save objects.</param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Helpers.FileHelpers.BuildFileGetter(System.String,System.String)">
            <summary>
                Creates a function that can open a file stream for writing.
                For use with IJob.Transfer(getter).
                Creates all directories needed to save the file.
            </summary>
            <param name="root">The root directory within which to save objects.</param>
            <param name="prefix">A string to prepend to the filename.</param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Helpers.FileHelpers.BuildFilePutter(System.String)">
            <summary>
                Creates a function that can open a file stream for reading.
                For use with IJob.Transfer(putter).
                Backwards-compatible signature before prefix was added
            </summary>
            <param name="root">The root directory within which to read objects.</param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Helpers.FileHelpers.BuildFilePutter(System.String,System.String)">
            <summary>
                Creates a function that can open a file stream for reading.
                For use with IJob.Transfer(putter).
            </summary>
            <param name="root">The root directory within which to read objects.</param>
            <param name="prefix">A string to prepend to the object name.</param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Helpers.FileHelpers.ListObjectsForDirectory(System.String)">
            <summary>
                Returns a list of object key, size pairs for a directory root (recursive).
                For use with IDs3ClientHelpers.StartWriteJob(bucket, objectsToWrite)
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Helpers.FileHelpers.PrependPrefix(System.String,System.String)">
            <summary>
                Add a prefix string to the beginning of a filename
                For use with ListObjectsForDirectory
            </summary>
            <param name="path">Full path too file</param>
            <param name="prefix">String to prepend to filename</param>
            <returns>full path with prefix prepended</returns>
        </member>
        <member name="M:Ds3.Helpers.FileHelpers.RemovePrefix(System.String,System.String)">
            <summary>
                Remove the prefix string from a filename to find the actual file
                For use with BuildFilePutter
            </summary>
            <param name="path">Full path too file</param>
            <param name="prefix">String to prepend to filename</param>
            <returns>full path with prefix prepended</returns>
        </member>
        <member name="P:Ds3.Helpers.IBaseJob`2.JobId">
            <summary>
            The id that allows the client to track job status and recover
            or delete jobs in the case of a failure during transfer.
            </summary>
        </member>
        <member name="P:Ds3.Helpers.IBaseJob`2.BucketName">
            <summary>
            The name of the bucket that this job is transferring to.
            </summary>
        </member>
        <member name="M:Ds3.Helpers.IBaseJob`2.WithMaxParallelRequests(System.Int32)">
             <summary>
             Must always be called before the Transfer method.
            
             Specifies The maximum number of simultaneous transfers
             to or from the server for this particular job.
             </summary>
             <param name="maxParallelRequests"></param>
             <returns>This IJob instance.</returns>
        </member>
        <member name="M:Ds3.Helpers.IBaseJob`2.WithCancellationToken(System.Threading.CancellationToken)">
             <summary>
             Must always be called before the Transfer method.
            
             Allows the client to stop transferring to a job using a
             CancellationTokenSource. Note that this does not cancel
             a job, and the job can be resumed later. If you'd like
             to cancel a job, use IDs3Client.DeleteJob().
             </summary>
             <param name="cancellationToken"></param>
             <returns>This IJob instance.</returns>
        </member>
        <member name="M:Ds3.Helpers.IBaseJob`2.WithMetadata(Ds3.Helpers.IMetadataAccess)">
            <summary>
            Must always be called before the Transfer method.
            
            Allows the client to add meta-data to objects.
            </summary>
            <param name="metadataAccess"></param>
            <returns>This IJob instance.</returns>
        </member>
        <member name="M:Ds3.Helpers.IBaseJob`2.WithChecksum(Ds3.Models.ChecksumType,Ds3.Models.ChecksumType.Type)">
            <summary>
            Must always be called before the Transfer method.
            Allows the client to add checksum to objects.
            </summary>
            <param name="checksum"></param>
            <param name="checksumType">(Option) The Checksum type</param>
            <returns>This IJob instance.</returns>
        </member>
        <member name="M:Ds3.Helpers.IBaseJob`2.Transfer(System.Func{`1,System.IO.Stream})">
             <summary>
             Performs all GETs or PUTs for the job (depending on the type
             of job).
            
             This method uses DS3 cache handling requests to efficiently
             transfer objects and handles multiplexing single object streams
             when the DS3 job response splits individual objects into multiple
             requests. It also performs requests in parallel for situations
             where doing so can improve performance.
             </summary>
             <seealso cref="M:Ds3.Helpers.FileHelpers.BuildFileGetter(System.String)"/>
             <seealso cref="M:Ds3.Helpers.FileHelpers.BuildFilePutter(System.String,System.String)"/>
             <param name="createStreamForTransferItem">Opens a stream for a given transfer item.</param>
        </member>
        <member name="E:Ds3.Helpers.IBaseJob`2.DataTransferred">
            <summary>
            Fires handlers with the amount of additional data that's been transferred
            when a part of a job is transferred.
            </summary>
        </member>
        <member name="E:Ds3.Helpers.IBaseJob`2.ItemCompleted">
            <summary>
            Fires handlers with the name of each transferred item as their transfers finish.
            </summary>
        </member>
        <member name="E:Ds3.Helpers.IBaseJob`2.MetadataListener">
            <summary>
            Fires handlers with an object name and the meta-data associated with it.
            </summary>
        </member>
        <member name="E:Ds3.Helpers.IBaseJob`2.OnFailure">
            <summary>
            A failure occurred while transferring a blob that we cannot recover from in the helper functions.
            Fires handlers with an object name, offset and the exception thrown
            </summary>
        </member>
        <member name="P:Ds3.Helpers.IPartialReadJob.AllItems">
            <summary>
            All of the items that this job will transfer. For full
            objects, this is the full object as a single Ds3PartialObject.
            </summary>
        </member>
        <member name="T:Ds3.Helpers.ProgressTrackers.JobItemTracker`1">
            <summary>
            A "job item" represents one of the things that the SDK client requests.
            In the case of regular GET and PUT jobs, this is an object. In the
            case of a partial object GET, this is a requested byte range for an
            object. If the user requests multiple byte ranges for the same object,
            each range counts as a "job item";
            </summary>
        </member>
        <member name="M:Ds3.Helpers.IDs3ClientHelpers.StartWriteJob(System.String,System.Collections.Generic.IEnumerable{Ds3.Models.Ds3Object},Ds3.Helpers.Ds3WriteJobOptions,Ds3.Helpers.Strategies.IHelperStrategy{System.String})">
            <summary>
            Runs a DS3 bulk PUT request with a set of objects and returns an
            interface that can PUT individual objects efficiently to the server.
            </summary>
            <seealso cref="M:Ds3.Helpers.FileHelpers.ListObjectsForDirectory(System.String)"/>
            <seealso cref="M:Ds3.Helpers.FileHelpers.ListObjectsForDirectory(System.String,System.String)"/>
            <param name="bucket">The name of the bucket to put the objects to.</param>
            <param name="objectsToWrite">The object names and sizes to put.</param>
            <param name="ds3WriteJobOptions">(Optional) The options to set on a write job</param>
            <param name="helperStrategy">(Optional) The helper strategy</param>
            <returns>An IJob implementation that can put each object per the DS3 protocol.</returns>
        </member>
        <member name="M:Ds3.Helpers.IDs3ClientHelpers.StartReadJob(System.String,System.Collections.Generic.IEnumerable{Ds3.Models.Ds3Object},Ds3.Helpers.Ds3ReadJobOptions,Ds3.Helpers.Strategies.IHelperStrategy{System.String})">
            <summary>
            Runs a DS3 bulk GET request with a set of objects and returns an
            interface that can GET individual objects efficiently from the server.
            </summary>
            <param name="bucket">The name of the bucket to get the objects from.</param>
            <param name="objectsToRead">The object names to get.</param>
            <param name="ds3ReadJobOptions">(Optional) The options to set on a read job</param>
            <param name="helperStrategy">(Optional) The helper strategy</param>
            <returns>An IJob implementation that can get each object per the DS3 protocol.</returns>
        </member>
        <member name="M:Ds3.Helpers.IDs3ClientHelpers.StartReadAllJob(System.String,Ds3.Helpers.Ds3ReadJobOptions,Ds3.Helpers.Strategies.IHelperStrategy{System.String})">
            <summary>
            Runs a DS3 bulk GET request for all of the objects in a bucket.
            </summary>
            <param name="bucket">The name of the bucket to get the objects from.</param>
            <param name="ds3ReadJobOptions">(Optional) The options to set on a read job</param>
            <param name="helperStrategy">(Optional) The helper strategy</param>
            <returns>An IJob implementation that can get each object per the DS3 protocol.</returns>
        </member>
        <member name="M:Ds3.Helpers.IDs3ClientHelpers.StartPartialReadJob(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Ds3.Models.Ds3PartialObject},Ds3.Helpers.Ds3ReadJobOptions,Ds3.Helpers.Strategies.IHelperStrategy{Ds3.Models.Ds3PartialObject})">
            <summary>
            Runs a DS3 bulk GET request with a set of partial object transfers and
            returns an interface that can GET individual object parts efficiently
            from the server.
            Note that you can get multiple ranges within the same object at the same
            time, but those ranges must be non-overlapping.
            </summary>
            <param name="bucket">The name of the bucket to get the objects from.</param>
            <param name="fullObjects">The list of full objects to get.</param>
            <param name="partialObjects">The object parts to get.</param>
            <param name="ds3ReadJobOptions">(Optional) The options to set on a partial read job</param>
            <param name="helperStrategy">(Optional) The helper strategy</param>
            <returns>The IPartialReadJob implementation that can get each partial object per the DS3 protocol.</returns>
        </member>
        <member name="M:Ds3.Helpers.IDs3ClientHelpers.ListObjects(System.String)">
             <summary>
             Returns information about all of the objects in a bucket.
            
             Note that this method requests 1,000 objects at a time as they are consumed.
             Thus, if a bucket contains 2,500 objects and you call
             helpers.ListObjects("bucket").Take(1500).ToList()
             then the client will issue exactly two requests.
             </summary>
             <param name="bucketName"></param>
             <returns></returns>
        </member>
        <member name="M:Ds3.Helpers.IDs3ClientHelpers.ListObjects(System.String,System.String)">
            <summary>
            Returns information about all of the objects in a bucket
            whose names start with a given prefix.
            </summary>
            <param name="bucketName"></param>
            <param name="keyPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Helpers.IDs3ClientHelpers.EnsureBucketExists(System.String)">
            <summary>
            Creates a bucket if it does not exist.
            </summary>
            <param name="bucketName"></param>
        </member>
        <member name="M:Ds3.Helpers.IDs3ClientHelpers.RecoverWriteJob(System.Guid,Ds3.Helpers.Strategies.IHelperStrategy{System.String})">
            <summary>
            Determines the state of an existing bulk PUT job and returns
            an interface that can PUT the remaining objects efficiently.
            </summary>
            <param name="jobId"></param>
            <param name="helperStrategy"></param>
            <returns>An IJob implementation that can put each object per the DS3 protocol.</returns>
        </member>
        <member name="M:Ds3.Helpers.IDs3ClientHelpers.RecoverReadJob(System.Guid,Ds3.Helpers.Strategies.IHelperStrategy{System.String})">
            <summary>
            Determines the state of an existing bulk GET job and returns
            an interface that can GET the remaining objects efficiently.
            </summary>
            <param name="jobId"></param>
            <param name="helperStrategy"></param>
            <returns>An IJob implementation that can put each object per the DS3 protocol.</returns>
        </member>
        <member name="T:Ds3.Helpers.IJob">
            <summary>
            Provides a simple API to efficiently transfer objects for a bulk job.
            </summary>
            <seealso>
                <cref>IDs3ClientHelpers.StartWriteJob</cref>
            </seealso>
            <seealso>
                <cref>IDs3ClientHelpers.StartReadJob</cref>
            </seealso>
        </member>
        <member name="P:Ds3.Models.ChecksumType.None">
            <summary>
            Do not provide a ChecksumType header on PUT.
            </summary>
        </member>
        <member name="P:Ds3.Models.ChecksumType.Compute">
            <summary>
            Calculate the ChecksumType automatically. This requires a seekable streem.
            </summary>
        </member>
        <member name="M:Ds3.Models.ChecksumType.Value(System.Byte[])">
            <summary>
            Provide a binary ChecksumType value directly, if the client
            application knows the ChecksumType of a payload beforehand.
            </summary>
            <param name="hash">The ChecksumType bytes</param>
            <returns>The ChecksumType "value" instance</returns>
        </member>
        <member name="M:Ds3.Models.ChecksumType.Match(System.Action,System.Action,System.Action{System.Byte[]})">
            <summary>
            Calls none, compute, or value, depending on which type this actually is.
            </summary>
            <param name="none">The function to call if the value is "none".</param>
            <param name="compute">The function to call if the value is "compute".</param>
            <param name="value">The function to call if the value is "value" with a ChecksumType payload.</param>
        </member>
        <member name="M:Ds3.Models.ChecksumType.Match``1(System.Func{``0},System.Func{``0},System.Func{System.Byte[],``0})">
            <summary>
            Calls none, compute, or value, depending on which type this actually is.
            </summary>
            <param name="none">The function to call if the value is "none".</param>
            <param name="compute">The function to call if the value is "compute".</param>
            <param name="value">The function to call if the value is "value" with a ChecksumType payload.</param>
            <returns>What either none, computer, or value return.</returns>
        </member>
        <member name="T:Ds3.Models.Crc32">
            <summary>
            Implements a 32-bit CRC hash algorithm
            </summary>
            <remarks>
            Crc32 should only be used for backward compatibility with older file formats
            and algorithms. It is not secure enough for new applications.
            If you need to call multiple times for the same data either use the HashAlgorithm
            interface or remember that the result of one Compute call needs to be ~ (XOR) before
            being passed in as the seed for the next Compute call.
            </remarks>
        </member>
        <member name="T:Ds3.Models.Crc32C">
            <summary>
            Implements CRC (Castagnoli) Hash as a checksum
            </summary>
            <remarks>
            Crc32 Uses teh same methods but a different polynomial which has been optimized 
            for computation in Intel hardware
            </remarks>
        </member>
        <member name="M:Ds3.Runtime.CustomPercentEscaper.PercentEncode(System.String,System.Char[])">
            <summary>
            Implements percent encoding of a URI path as specified by RFC 3986 Section 2.1
            http://tools.ietf.org/html/rfc3986#section-2.1
            
            This method percent encodes the UTF-8 representation of all characters except those
            specified in the "allowedChars" parameter.
            
            We've implemented this method because all of the available built-in .NET framework
            methods are incomplete in one way or another.
            </summary>
            <param name="path"></param>
            <param name="allowedChars"></param>
            <returns></returns>
        </member>
        <member name="F:Ds3.Runtime.HttpHelper.UnreservedCharsParam">
            <summary>
            Specified as "Unreserved" by the RFC
            </summary>
        </member>
        <member name="F:Ds3.Runtime.HttpHelper.UnreservedCharsPath">
            <summary>
            Specified as "Unreserved" by the RFC, plus (+), and forward slash (/)
            </summary>
        </member>
        <member name="M:Ds3.Runtime.HttpHelper.PercentEncodePath(System.String)">
            <summary>
            Implements percent encoding of a URI path as specified by RFC 3986 Section 2.1
            http://tools.ietf.org/html/rfc3986#section-2.1
            
            This method percent encodes the UTF-8 representation of all characters except those
            specified as "Unreserved" by the RFC or a forward slash (/).
            
            We've implemented this method because all of the available built-in .NET framework
            methods are incomplete in one way or another.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Runtime.HttpHelper.PercentEncodeParam(System.String)">
            <summary>
            Implements percent encoding of a URI path as specified by RFC 3986 Section 2.1
            http://tools.ietf.org/html/rfc3986#section-2.1
            
            This method percent encodes the UTF-8 representation of all characters except those
            specified as "Unreserved" by the RFC or specified in the "allowedChars" parame1ter.
            
            We've implemented this method because all of the available built-in .NET framework
            methods are incomplete in one way or another.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Ds3.Runtime.MetadataUtil">
            <summary>
            Percent encodes and decodes metadata keys and values. The encoding comforms to the HTTP header
            key requirements. Header keys contain only printable US-ASCII characters that are non-separators.
            </summary>
        </member>
        <member name="F:Ds3.Runtime.MetadataUtil.AllowedChars">
            <summary>
            List of printable US-ASCII characters that do not need percent encoding.
            Includes separators equals "=" and comma ",": not encoded for use in creating Range header
            Excludes separators: <![CDATA["(" | ")" | "<" | ">" | "@" | ";" | ":" | "\" | <"> | "/" | "[" | "]" | "?" | "{" | "}"]]>
            Excludes Percent "%": not considered safe because it is used in percent encoding
            Excludes Plus "+": not considered safe because its interpreted as space during decoding
            </summary>
        </member>
        <member name="M:Ds3.Runtime.MetadataUtil.EscapeString(System.String)">
            <summary>
            Percent encodes non-alpha-numeric characters within the specified string
            excluding the symbols listed in <see cref="F:Ds3.Runtime.MetadataUtil.AllowedChars" /> using UTF-8
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Runtime.MetadataUtil.UnescapeString(System.String)">
            <summary>
            Decodes a percent-encoded string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Runtime.MetadataUtil.EscapeMetadata(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Percent encodes non-alpha-numeric characters within the specified dictionary
            excluding the symbols listed in <see cref="F:Ds3.Runtime.MetadataUtil.AllowedChars" /> using UTF-8
            </summary>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Runtime.MetadataUtil.UnescapeMetadata(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Decodes all keys and values within a dictionary that are percent-encoded
            </summary>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="P:Ds3.Runtime.RequestHeaders.Headers">
            <summary>
            The percent encoded request headers dictionary
            </summary>
        </member>
        <member name="M:Ds3.Runtime.RequestHeaders.Keys">
            <summary>
            Gets a collection containing the non-percent-encoded keys in request headers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ds3.Runtime.RequestHeaders.Remove(System.String)">
            <summary>
            Removes the value with the specified key from request headers
            </summary>
            <param name="key">The non-percent-encoded value to be removed</param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Runtime.RequestHeaders.Add(System.String,System.String)">
            <summary>
            Percent encodes and adds a key-value-pair to request headers
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="F:Ds3.Runtime.S3Signer._subresourcesToCanonicalize">
            <summary>
            List of resources that must be a part of the CanonicalizedResource Element.
            See "Constructing the CanonicalizedResource Element" -> "Launch Process" -> table row 4
            http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html
            </summary>
        </member>
        <member name="M:Ds3.Runtime.Ds3WebResponse.ConvertToDictionary(System.Net.WebHeaderCollection)">
            <summary>
            Converts the WebHeaderCollection into a header dictionary and percent-decodes the key and header values
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.IDs3ClientFactory.GetClientForNodeId(System.Nullable{System.Guid})">
            <summary>
            Returns a client that connects to the specified node id.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="T:Ds3.IDs3Client">
            <summary>
            The main DS3 API interface. Use Ds3Builder to instantiate.
            </summary>
        </member>
        <member name="M:Ds3.IDs3Client.BuildFactory(System.Collections.Generic.IEnumerable{Ds3.Models.JobNode})">
            <summary>
            For multi-node support (planned), this provides a means of creating
            a client that connects to the specified node id.
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Ds3Builder.FromEnv">
            <summary>
            Creates a Ds3Builder with the endpoint, credentials, and proxy all populated from
            environment variables.
            </summary>
        </member>
        <member name="M:Ds3.Ds3Builder.#ctor(System.String,Ds3.Credentials)">
            <summary>
            </summary>
            <param name="endpoint">The HTTP or HTTPS location at which your DS3 server is listening.</param>
            <param name="creds">Credentials with which to specify identity and sign requests.</param>
        </member>
        <member name="M:Ds3.Ds3Builder.#ctor(System.Uri,Ds3.Credentials)">
            <summary>
            </summary>
            <param name="endpoint">The HTTP or HTTPS location at which your DS3 server is listening.</param>
            <param name="creds">Credentials with which to specify identity and sign requests.</param>
        </member>
        <member name="M:Ds3.Ds3Builder.WithProxy(System.Uri)">
            <summary>
            Used to specify an HTTP proxy.
            </summary>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Ds3Builder.WithRedirectRetries(System.Int32)">
            <summary>
            Sometimes the DS3 server isn't ready to service a request. In these
            situations it will periodically respond with a 307 redirect to keep
            the connection alive. The SDK makes this transparent if it happens up to RedirectRetries times.
            Use this to specify a limit on how many times this should happen before throwing an exception.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Ds3Builder.WithCopyBufferSize(System.Int32)">
            <summary>
            Determines how many bytes to copy at a time to and from input streams when
            performing object GET and PUT operations.
            </summary>
            <param name="copyBufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Ds3Builder.WithReadWriteTimeout(System.Int32)">
            <summary>
            Specifies how long to wait in milliseconds for an HTTP request or response to transfer.
            </summary>
            <param name="readWriteTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Ds3Builder.WithRequestTimeout(System.Int32)">
            <summary>
            Specifies how long to wait in milliseconds for the server to respond once the HTTP request has been fully sent.
            </summary>
            <param name="requestTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Ds3Builder.WithConnectionLimit(System.Int32)">
            <summary>
            Specifies how many concurrent connections we can open to a single host.
            </summary>
            <param name="connectionLimit"></param>
            <returns></returns>
        </member>
        <member name="M:Ds3.Ds3Builder.Build">
            <summary>
            Creates the Ds3Client using the specified parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ds3.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Ds3.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Ds3.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Ds3.Resources.BadStatusCodeException">
            <summary>
              Looks up a localized string similar to Received a status code of {0} when one of {1} was expected. Error message: &quot;{2}&quot;.
            </summary>
        </member>
        <member name="P:Ds3.Resources.BadStatusCodeInvalidErrorResponseException">
            <summary>
              Looks up a localized string similar to Received a status code of {0} when one of {1} was expected. Could not parse the response for additional information..
            </summary>
        </member>
        <member name="P:Ds3.Resources.CannotSeekStreamException">
            <summary>
              Looks up a localized string similar to Must provide a seekable stream when wrapping a WindowedStream..
            </summary>
        </member>
        <member name="P:Ds3.Resources.ContentLengthNotMatch">
            <summary>
              Looks up a localized string similar to The Content length ({0}) not match the number of byte read ({1}).
            </summary>
        </member>
        <member name="P:Ds3.Resources.Encountered307NTimes">
            <summary>
              Looks up a localized string similar to Encountered 307 number: {0}.
            </summary>
        </member>
        <member name="P:Ds3.Resources.EnumeratorsNotOfEqualLengthException">
            <summary>
              Looks up a localized string similar to Some of the provided enumerators are not equal in length..
            </summary>
        </member>
        <member name="P:Ds3.Resources.ExpectedGetJobButWasPutJobException">
            <summary>
              Looks up a localized string similar to Expected a GET job, but was a PUT job..
            </summary>
        </member>
        <member name="P:Ds3.Resources.ExpectedObjectOfSameTypeException">
            <summary>
              Looks up a localized string similar to Comparison argument must be of the same type..
            </summary>
        </member>
        <member name="P:Ds3.Resources.ExpectedPutJobButWasGetJobException">
            <summary>
              Looks up a localized string similar to Expected a PUT job, but was a GET job..
            </summary>
        </member>
        <member name="P:Ds3.Resources.ForbiddenPriorityException">
            <summary>
              Looks up a localized string similar to It is illegal to specify value &apos;{0}&apos; for type IJob.
            </summary>
        </member>
        <member name="P:Ds3.Resources.FormatXmlException">
            <summary>
              Looks up a localized string similar to Encountered an exception when formating xml string..
            </summary>
        </member>
        <member name="P:Ds3.Resources.HandleAlreadyDisposedException">
            <summary>
              Looks up a localized string similar to This handle was already disposed. This is a bug. Please make Disposing only fire once..
            </summary>
        </member>
        <member name="P:Ds3.Resources.HandleAlreadyUsedException">
            <summary>
              Looks up a localized string similar to This handle to a shared object has already been used..
            </summary>
        </member>
        <member name="P:Ds3.Resources.HandleDoesNotExistException">
            <summary>
              Looks up a localized string similar to This handle to a shared resource was not expected..
            </summary>
        </member>
        <member name="P:Ds3.Resources.HttpsNotSupportedOnMono">
            <summary>
              Looks up a localized string similar to HTTPS requests are not supported on Mono..
            </summary>
        </member>
        <member name="P:Ds3.Resources.InvalidEnumValueException">
            <summary>
              Looks up a localized string similar to Enum value not accounted for in a switch statement intended to be exhaustive..
            </summary>
        </member>
        <member name="P:Ds3.Resources.InvalidOffsetException">
            <summary>
              Looks up a localized string similar to Unexpected offset {1} for key &apos;{0}&apos; when releasing stream..
            </summary>
        </member>
        <member name="P:Ds3.Resources.InvalidSeekOrigin">
            <summary>
              Looks up a localized string similar to Invalid SeekOrigin: {0}.
            </summary>
        </member>
        <member name="P:Ds3.Resources.InvalidStreamException">
            <summary>
              Looks up a localized string similar to PUT object streams must be readable..
            </summary>
        </member>
        <member name="P:Ds3.Resources.InvalidValueForTypeException">
            <summary>
              Looks up a localized string similar to Invalid value for type: {0}.
            </summary>
        </member>
        <member name="P:Ds3.Resources.JobCompletedException">
            <summary>
              Looks up a localized string similar to The job is already completed.
            </summary>
        </member>
        <member name="P:Ds3.Resources.JobGoneException">
            <summary>
              Looks up a localized string similar to The job went away as we were trying to acquire chunk information..
            </summary>
        </member>
        <member name="P:Ds3.Resources.MissingElementException">
            <summary>
              Looks up a localized string similar to Expected an element called &quot;{0}&quot; but didn&apos;t find it..
            </summary>
        </member>
        <member name="P:Ds3.Resources.MissingHeaderException">
            <summary>
              Looks up a localized string similar to Expected a header called &quot;{0}&quot; but didn&apos;t find it..
            </summary>
        </member>
        <member name="P:Ds3.Resources.NoMoreRetransmitException">
            <summary>
              Looks up a localized string similar to Reached the limit of {0} retries for retransmissions for blob {1} with offset {2}.
            </summary>
        </member>
        <member name="P:Ds3.Resources.NoMoreRetriesException">
            <summary>
              Looks up a localized string similar to Reached the maximum number of retries when attempting to get cache space.
            </summary>
        </member>
        <member name="P:Ds3.Resources.NoObjectsToTransferException">
            <summary>
              Looks up a localized string similar to Tried to perform a bulk job but there were no objects to transfer..
            </summary>
        </member>
        <member name="P:Ds3.Resources.NotSupportedStream">
            <summary>
              Looks up a localized string similar to Non seekable stream are not supported for PUTs retransmit.
            </summary>
        </member>
        <member name="P:Ds3.Resources.ObjectsMissingSizeException">
            <summary>
              Looks up a localized string similar to Some or all of the objects to put are missing a size field..
            </summary>
        </member>
        <member name="P:Ds3.Resources.RangeNotTrackedException">
            <summary>
              Looks up a localized string similar to The requested range was not available to be marked completed..
            </summary>
        </member>
        <member name="P:Ds3.Resources.RangesDoNotOverlapException">
            <summary>
              Looks up a localized string similar to Ranges {0} and {1} do not overlap..
            </summary>
        </member>
        <member name="P:Ds3.Resources.RequestLogging">
            <summary>
              Looks up a localized string similar to Request: {0}.
            </summary>
        </member>
        <member name="P:Ds3.Resources.ResponseLogging">
            <summary>
              Looks up a localized string similar to | Response status: {0} ({1}ms).
            </summary>
        </member>
        <member name="P:Ds3.Resources.StreamUnavailableException">
            <summary>
              Looks up a localized string similar to Job tried to open stream for key &apos;{0}&apos;, but that key should not be available. This is probably a bug in the helpers..
            </summary>
        </member>
        <member name="P:Ds3.Resources.TooManyRedirectsException">
            <summary>
              Looks up a localized string similar to Too many redirects..
            </summary>
        </member>
        <member name="P:Ds3.Resources.TooManyRetriesForPartialData">
            <summary>
              Looks up a localized string similar to Exhausted retries for retrieving data when partial data was received..
            </summary>
        </member>
        <member name="P:Ds3.Resources.XmlResponseErrorException">
            <summary>
              Looks up a localized string similar to Encountered an error while reading XML response: &quot;{0}&quot;.
            </summary>
        </member>
    </members>
</doc>

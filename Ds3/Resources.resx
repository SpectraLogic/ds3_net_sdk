<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BadStatusCodeException" xml:space="preserve">
    <value>Received a status code of {0} when one of {1} was expected. Error message: "{2}"</value>
  </data>
  <data name="BadStatusCodeInvalidErrorResponseException" xml:space="preserve">
    <value>Received a status code of {0} when one of {1} was expected. Could not parse the response for additional information.</value>
  </data>
  <data name="CannotSeekStreamException" xml:space="preserve">
    <value>Must provide a seekable stream when wrapping a WindowedStream.</value>
  </data>
  <data name="Encountered307NTimes" xml:space="preserve">
    <value>Encountered 307 number: {0}</value>
  </data>
  <data name="EnumeratorsNotOfEqualLengthException" xml:space="preserve">
    <value>Some of the provided enumerators are not equal in length.</value>
  </data>
  <data name="ExpectedObjectOfSameTypeException" xml:space="preserve">
    <value>Comparison argument must be of the same type.</value>
  </data>
  <data name="ExpectedPutJobButWasGetJobException" xml:space="preserve">
    <value>Expected a PUT job, but was a GET job.</value>
  </data>
  <data name="FormatXmlException" xml:space="preserve">
    <value>Encountered an exception when formating xml string.</value>
  </data>
  <data name="HandleAlreadyDisposedException" xml:space="preserve">
    <value>This handle was already disposed. This is a bug. Please make Disposing only fire once.</value>
  </data>
  <data name="HandleAlreadyUsedException" xml:space="preserve">
    <value>This handle to a shared object has already been used.</value>
  </data>
  <data name="HandleDoesNotExistException" xml:space="preserve">
    <value>This handle to a shared resource was not expected.</value>
  </data>
  <data name="InvalidEnumValueException" xml:space="preserve">
    <value>Enum value not accounted for in a switch statement intended to be exhaustive.</value>
  </data>
  <data name="InvalidOffsetException" xml:space="preserve">
    <value>Unexpected offset {1} for key '{0}' when releasing stream.</value>
  </data>
  <data name="InvalidSeekOrigin" xml:space="preserve">
    <value>Invalid SeekOrigin: {0}</value>
  </data>
  <data name="InvalidStreamException" xml:space="preserve">
    <value>PUT object streams must be readable.</value>
  </data>
  <data name="InvalidValueForTypeException" xml:space="preserve">
    <value>Invalid value for type: {0}</value>
  </data>
  <data name="JobGoneException" xml:space="preserve">
    <value>The job went away as we were trying to acquire chunk information.</value>
  </data>
  <data name="MissingElementException" xml:space="preserve">
    <value>Expected an element called "{0}" but didn't find it.</value>
  </data>
  <data name="MissingHeaderException" xml:space="preserve">
    <value>Expected a header called "{0}" but didn't find it.</value>
  </data>
  <data name="NoObjectsToTransferException" xml:space="preserve">
    <value>Tried to perform a bulk job but there were no objects to transfer.</value>
  </data>
  <data name="ObjectsMissingSizeException" xml:space="preserve">
    <value>Some or all of the objects to put are missing a size field.</value>
  </data>
  <data name="RangeNotTrackedException" xml:space="preserve">
    <value>The requested range was not available to be marked completed.</value>
  </data>
  <data name="RangesDoNotOverlapException" xml:space="preserve">
    <value>Ranges {0} and {1} do not overlap.</value>
  </data>
  <data name="RequestLogging" xml:space="preserve">
    <value>Request: {0}</value>
  </data>
  <data name="ResponseLogging" xml:space="preserve">
    <value>| Response status: {0} ({1}ms)</value>
  </data>
  <data name="StreamUnavailableException" xml:space="preserve">
    <value>Job tried to open stream for key '{0}', but that key should not be available. This is probably a bug in the helpers.</value>
  </data>
  <data name="TooManyRedirectsException" xml:space="preserve">
    <value>Too many redirects.</value>
  </data>
  <data name="XmlResponseErrorException" xml:space="preserve">
    <value>Encountered an error while reading XML response: "{0}"</value>
  </data>
  <data name="NoMoreRetriesException" xml:space="preserve">
    <value>Reached the maximum number of retries when attempting to get cache space</value>
  </data>
  <data name="ContentLengthNotMatch" xml:space="preserve">
    <value>The Content length ({0}) not match the number of byte read ({1})</value>
  </data>
  <data name="TooManyRetriesForPartialData" xml:space="preserve">
    <value>Exhausted retries for retrieving data when partial data was received.</value>
  </data>
  <data name="ExpectedGetJobButWasPutJobException" xml:space="preserve">
    <value>Expected a GET job, but was a PUT job.</value>
  </data>
  <data name="JobCompletedException" xml:space="preserve">
    <value>The job is already completed</value>
  </data>
  <data name="NoMoreRetransmitException" xml:space="preserve">
    <value>Reached the limit of {0} retries for retransmissions for blob {1} with offset {2}</value>
  </data>
  <data name="NotSupportedStream" xml:space="preserve">
    <value>Non seekable stream are not supported for PUTs retransmit</value>
  </data>
  <data name="HttpsNotSupportedOnMono" xml:space="preserve">
    <value>HTTPS requests are not supported on Mono.</value>
  </data>
  <data name="ForbiddenPriorityException" xml:space="preserve">
    <value>It is illegal to specify value '{0}' for type IJob</value>
  </data>
  <data name="UseRecoverAggregatedWriteJob" xml:space="preserve">
    <value>Please use RecoverAggregatedWriteJob when trying to recover an aggregated job.</value>
  </data>
</root>